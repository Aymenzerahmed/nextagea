// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __HRPcontroller_hh__
#define __HRPcontroller_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_HRPcontroller
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_HRPcontroller
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_HRPcontroller
#endif



#ifndef __OpenHRPCommon_hh_EXTERNAL_GUARD__
#define __OpenHRPCommon_hh_EXTERNAL_GUARD__
#include <OpenHRPCommon.h>
#endif
#ifndef __ViewSimulator_hh_EXTERNAL_GUARD__
#define __ViewSimulator_hh_EXTERNAL_GUARD__
#include <ViewSimulator.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE OpenHRP

_CORBA_MODULE_BEG

#ifndef __OpenHRP_mCommandReceiver__
#define __OpenHRP_mCommandReceiver__
  class CommandReceiver;
  class _objref_CommandReceiver;
  class _impl_CommandReceiver;
  
  typedef _objref_CommandReceiver* CommandReceiver_ptr;
  typedef CommandReceiver_ptr CommandReceiverRef;

  class CommandReceiver_Helper {
  public:
    typedef CommandReceiver_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_CommandReceiver, CommandReceiver_Helper> CommandReceiver_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_CommandReceiver,CommandReceiver_Helper > CommandReceiver_out;

#endif

  // interface CommandReceiver
  class CommandReceiver {
  public:
    // Declarations for this interface type.
    typedef CommandReceiver_ptr _ptr_type;
    typedef CommandReceiver_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_CommandReceiver :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    void sendMsg(const char* msg);

    // Constructors
    inline _objref_CommandReceiver()  { _PR_setobj(0); }  // nil
    _objref_CommandReceiver(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_CommandReceiver();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_CommandReceiver(const _objref_CommandReceiver&);
    _objref_CommandReceiver& operator = (const _objref_CommandReceiver&);
    // not implemented

    friend class CommandReceiver;
  };

  class _pof_CommandReceiver : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_CommandReceiver() : _OMNI_NS(proxyObjectFactory)(CommandReceiver::_PD_repoId) {}
    virtual ~_pof_CommandReceiver();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_CommandReceiver :
    public virtual omniServant
  {
  public:
    virtual ~_impl_CommandReceiver();

    virtual void sendMsg(const char* msg) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __OpenHRP_mPlugin__
#define __OpenHRP_mPlugin__
  class Plugin;
  class _objref_Plugin;
  class _impl_Plugin;
  
  typedef _objref_Plugin* Plugin_ptr;
  typedef Plugin_ptr PluginRef;

  class Plugin_Helper {
  public:
    typedef Plugin_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_Plugin, Plugin_Helper> Plugin_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_Plugin,Plugin_Helper > Plugin_out;

#endif

  // interface Plugin
  class Plugin {
  public:
    // Declarations for this interface type.
    typedef Plugin_ptr _ptr_type;
    typedef Plugin_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_Plugin :
    public virtual _objref_CommandReceiver
  {
  public:
    // IDL operations
    void start();
    void stop();

    // Constructors
    inline _objref_Plugin()  { _PR_setobj(0); }  // nil
    _objref_Plugin(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_Plugin();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_Plugin(const _objref_Plugin&);
    _objref_Plugin& operator = (const _objref_Plugin&);
    // not implemented

    friend class Plugin;
  };

  class _pof_Plugin : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_Plugin() : _OMNI_NS(proxyObjectFactory)(Plugin::_PD_repoId) {}
    virtual ~_pof_Plugin();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_Plugin :
    public virtual _impl_CommandReceiver
  {
  public:
    virtual ~_impl_Plugin();

    virtual void start() = 0;
    virtual void stop() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __OpenHRP_mPluginManager__
#define __OpenHRP_mPluginManager__
  class PluginManager;
  class _objref_PluginManager;
  class _impl_PluginManager;
  
  typedef _objref_PluginManager* PluginManager_ptr;
  typedef PluginManager_ptr PluginManagerRef;

  class PluginManager_Helper {
  public:
    typedef PluginManager_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_PluginManager, PluginManager_Helper> PluginManager_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_PluginManager,PluginManager_Helper > PluginManager_out;

#endif

  // interface PluginManager
  class PluginManager {
  public:
    // Declarations for this interface type.
    typedef PluginManager_ptr _ptr_type;
    typedef PluginManager_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_PluginManager :
    public virtual _objref_CommandReceiver
  {
  public:
    // IDL operations
    void load(const char* name);
    Plugin_ptr create(const char* pclass, const char* name, const char* args);
    StringSequence* getPluginNames();

    // Constructors
    inline _objref_PluginManager()  { _PR_setobj(0); }  // nil
    _objref_PluginManager(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_PluginManager();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_PluginManager(const _objref_PluginManager&);
    _objref_PluginManager& operator = (const _objref_PluginManager&);
    // not implemented

    friend class PluginManager;
  };

  class _pof_PluginManager : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_PluginManager() : _OMNI_NS(proxyObjectFactory)(PluginManager::_PD_repoId) {}
    virtual ~_pof_PluginManager();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_PluginManager :
    public virtual _impl_CommandReceiver
  {
  public:
    virtual ~_impl_PluginManager();

    virtual void load(const char* name) = 0;
    virtual Plugin_ptr create(const char* pclass, const char* name, const char* args) = 0;
    virtual StringSequence* getPluginNames() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  struct RobotState {
    typedef _CORBA_ConstrType_Variable_Var<RobotState> _var_type;

    
    DblSequence angle;

    DblSequence velocity;

    DblSequence torque;

    typedef _CORBA_Unbounded_Sequence< DblSequence6 >  _force_seq;
    _force_seq force;

    typedef _CORBA_Unbounded_Sequence< DblSequence3 >  _rateGyro_seq;
    _rateGyro_seq rateGyro;

    typedef _CORBA_Unbounded_Sequence< DblSequence3 >  _accel_seq;
    _accel_seq accel;

    typedef _CORBA_Unbounded_Sequence< DblSequence9 >  _attitude_seq;
    _attitude_seq attitude;

    DblSequence3 zmp;

    DblSequence3 basePos;

    DblSequence9 baseAtt;

    typedef _CORBA_Unbounded_Sequence< ImageData >  _image_seq;
    _image_seq image;

    LongSequence dio;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef RobotState::_var_type RobotState_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< RobotState,RobotState_var > RobotState_out;

_CORBA_MODULE_END



_CORBA_MODULE POA_OpenHRP
_CORBA_MODULE_BEG

  class CommandReceiver :
    public virtual OpenHRP::_impl_CommandReceiver,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~CommandReceiver();

    inline ::OpenHRP::CommandReceiver_ptr _this() {
      return (::OpenHRP::CommandReceiver_ptr) _do_this(::OpenHRP::CommandReceiver::_PD_repoId);
    }
  };

  class Plugin :
    public virtual OpenHRP::_impl_Plugin,
    public virtual CommandReceiver
  {
  public:
    virtual ~Plugin();

    inline ::OpenHRP::Plugin_ptr _this() {
      return (::OpenHRP::Plugin_ptr) _do_this(::OpenHRP::Plugin::_PD_repoId);
    }
  };

  class PluginManager :
    public virtual OpenHRP::_impl_PluginManager,
    public virtual CommandReceiver
  {
  public:
    virtual ~PluginManager();

    inline ::OpenHRP::PluginManager_ptr _this() {
      return (::OpenHRP::PluginManager_ptr) _do_this(::OpenHRP::PluginManager::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_OpenHRP
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
OpenHRP::CommandReceiver::_marshalObjRef(::OpenHRP::CommandReceiver_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}

inline void
OpenHRP::Plugin::_marshalObjRef(::OpenHRP::Plugin_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}

inline void
OpenHRP::PluginManager::_marshalObjRef(::OpenHRP::PluginManager_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_HRPcontroller
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_HRPcontroller
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_HRPcontroller
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_HRPcontroller
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_HRPcontroller
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_HRPcontroller
#endif

#endif  // __HRPcontroller_hh__

